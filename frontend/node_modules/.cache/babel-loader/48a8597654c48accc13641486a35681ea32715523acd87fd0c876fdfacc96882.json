{"ast":null,"code":"export const generateHash=async(email,password)=>{const msg=`${email}:${password}`;const msgBuffer=new TextEncoder().encode(msg);const hashBuffer=await crypto.subtle.digest('SHA-256',msgBuffer);const hashArray=Array.from(new Uint8Array(hashBuffer));const hashHex=hashArray.map(b=>b.toString(16).padStart(2,'0')).join('');return hashHex;};","map":{"version":3,"names":["generateHash","email","password","msg","msgBuffer","TextEncoder","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join"],"sources":["C:/Users/Prathika/OneDrive/Desktop/health/healthcare-platform/frontend/src/utils/hash.js"],"sourcesContent":["\r\n  \r\n\r\nexport const generateHash = async (email, password) => {\r\n    const msg = `${email}:${password}`;\r\n    const msgBuffer = new TextEncoder().encode(msg);\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n    return hashHex;\r\n  };\r\n  "],"mappings":"AAGA,MAAO,MAAM,CAAAA,YAAY,CAAG,KAAAA,CAAOC,KAAK,CAAEC,QAAQ,GAAK,CACnD,KAAM,CAAAC,GAAG,CAAG,GAAGF,KAAK,IAAIC,QAAQ,EAAE,CAClC,KAAM,CAAAE,SAAS,CAAG,GAAI,CAAAC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACH,GAAG,CAAC,CAC/C,KAAM,CAAAI,UAAU,CAAG,KAAM,CAAAC,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC,SAAS,CAAEN,SAAS,CAAC,CACnE,KAAM,CAAAO,SAAS,CAAGC,KAAK,CAACC,IAAI,CAAC,GAAI,CAAAC,UAAU,CAACP,UAAU,CAAC,CAAC,CACxD,KAAM,CAAAQ,OAAO,CAAGJ,SAAS,CAACK,GAAG,CAACC,CAAC,EAAIA,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAC5E,MAAO,CAAAL,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}