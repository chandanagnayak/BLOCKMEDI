{"ast":null,"code":"\n\n// export const generateHash = async (email, password) => {\n//     const msg = `${email}:${password}`;\n//     const msgBuffer = new TextEncoder().encode(msg);\n//     const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\n//     const hashArray = Array.from(new Uint8Array(hashBuffer));\n//     const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n//     return hashHex;\n//   };\n\n// import { ethers } from 'ethers';\n\n// export async function generateHash(email, password) {\n//   const data = email + password;\n//   const hash = ethers.keccak256(ethers.toUtf8Bytes(data)); // Returns a string like '0x...'\n//   return hash; // Ensure the '0x' prefix is kept\n// }","map":{"version":3,"names":[],"sources":["C:/Users/Prathika/OneDrive/Desktop/health/healthcare-platform/frontend/src/utils/hash.js"],"sourcesContent":["\r\n  \r\n\r\n// export const generateHash = async (email, password) => {\r\n//     const msg = `${email}:${password}`;\r\n//     const msgBuffer = new TextEncoder().encode(msg);\r\n//     const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\r\n//     const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n//     const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n//     return hashHex;\r\n//   };\r\n  \r\n\r\n// import { ethers } from 'ethers';\r\n\r\n// export async function generateHash(email, password) {\r\n//   const data = email + password;\r\n//   const hash = ethers.keccak256(ethers.toUtf8Bytes(data)); // Returns a string like '0x...'\r\n//   return hash; // Ensure the '0x' prefix is kept\r\n// }"],"mappings":";;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}