{"ast":null,"code":"export const generateHash = async (email, password) => {\n  const msg = `${email}:${password}`;\n  const msgBuffer = new TextEncoder().encode(msg);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  return hashHex;\n};","map":{"version":3,"names":["generateHash","email","password","msg","msgBuffer","TextEncoder","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join"],"sources":["C:/Users/Prathika/OneDrive/Desktop/health/healthcare-platform/frontend/src/utils/hash.js"],"sourcesContent":["\r\n  \r\n\r\nexport const generateHash = async (email, password) => {\r\n    const msg = `${email}:${password}`;\r\n    const msgBuffer = new TextEncoder().encode(msg);\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n    return hashHex;\r\n  };\r\n  "],"mappings":"AAGA,OAAO,MAAMA,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACnD,MAAMC,GAAG,GAAG,GAAGF,KAAK,IAAIC,QAAQ,EAAE;EAClC,MAAME,SAAS,GAAG,IAAIC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACH,GAAG,CAAC;EAC/C,MAAMI,UAAU,GAAG,MAAMC,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC,SAAS,EAAEN,SAAS,CAAC;EACnE,MAAMO,SAAS,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,UAAU,CAACP,UAAU,CAAC,CAAC;EACxD,MAAMQ,OAAO,GAAGJ,SAAS,CAACK,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EAC5E,OAAOL,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}